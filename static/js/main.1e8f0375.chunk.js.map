{"version":3,"sources":["components/Layout/Layout.module.css","components/Button/Button.module.css","components/Layout/Layout.js","components/SectionTitle.js","components/Button/Button.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","children","className","styles","SectionTitle","title","Button","onFeedback","type","feedbackButton","onClick","toLowerCase","FeedbackOptions","options","map","option","i","key","defaultProps","Statistics","good","neutral","bad","total","posFeedback","Notification","message","App","state","clickHandler","feedbackType","setState","prevState","this","countTotalFeedback","result","toFixed","Object","keys","toUpperCase","slice","feedbackStats","countPositiveFeedbackPercentage","notification","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e8f0375.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__12FtZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackButton\":\"Button_feedbackButton__u6SDo\"};","import React from 'react';\nimport styles from './Layout.module.css';\nimport PropTypes from 'prop-types';\n\nconst Layout = ({ children }) => (\n  <div className={styles.Layout}>{children}</div>\n);\n\nLayout.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SectionTitle = ({ title = 'Title', children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n};\n\nexport default SectionTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Button.module.css';\n\nconst Button = ({ title = 'Good', onFeedback }) => {\n  return (\n    <button\n      type=\"button\"\n      className={styles.feedbackButton}\n      onClick={() => onFeedback(title.toLowerCase())}\n    >\n      {title}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onFeedback: PropTypes.func.isRequired,\n};\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button/Button';\n\nconst FeedbackOptions = ({ options, onFeedback }) => {\n  return (\n    <>\n      {options.map((option, i) => {\n        return <Button key={i} title={option} onFeedback={onFeedback} />;\n      })}\n    </>\n  );\n};\n\nFeedbackOptions.defaultProps = {\n  options: ['good', 'neutral', 'bad'],\n};\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({\n  good = 0,\n  neutral = 0,\n  bad = 0,\n  total = 0,\n  posFeedback = 0,\n}) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {posFeedback}%</p>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  posFeedback: PropTypes.number,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message = '' }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Layout from './Layout/Layout';\nimport SectionTitle from './SectionTitle';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\nimport Notification from './Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const total = this.countTotalFeedback();\n    const result = +((this.state.good / total) * 100).toFixed(1);\n    return total ? result : 0;\n  }\n\n  clickHandler = (feedbackType) => {\n    return this.setState((prevState) => ({\n      [feedbackType]: prevState[feedbackType] + 1,\n    }));\n  };\n\n  render() {\n    const options = Object.keys(this.state).map(\n      (key) => key[0].toUpperCase() + key.slice(1)\n    );\n    const { good, neutral, bad } = this.state;\n    const feedbackStats = (\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={this.countTotalFeedback()}\n        posFeedback={this.countPositiveFeedbackPercentage()}\n      />\n    );\n    const notification = <Notification message=\"No feedback given :(\" />;\n\n    return (\n      <Layout>\n        <SectionTitle title=\"What do you think of us?\">\n          <FeedbackOptions options={options} onFeedback={this.clickHandler} />\n        </SectionTitle>\n        <SectionTitle title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? feedbackStats : notification}\n        </SectionTitle>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}