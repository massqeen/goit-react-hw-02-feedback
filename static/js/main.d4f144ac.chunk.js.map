{"version":3,"sources":["components/Layout/LayoutStyles.js","components/Layout/Layout.js","components/SectionTitle.js","components/Button/ButtonStyles.js","components/Button/Button.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","js/countTotalFeedback.js","js/countPositiveFeedbackPercentage.js","App.js","index.js"],"names":["Div","styled","div","Layout","children","SectionTitle","title","ButtonStyled","button","Button","onFeedback","type","onClick","toLowerCase","FeedbackOptions","options","map","option","i","Statistics","good","neutral","bad","total","posFeedback","Notification","message","countTotalFeedback","obj","Object","values","reduce","acc","curr","countPositiveFeedbackPercentage","key","result","toFixed","App","useState","feedback","setFeedback","feedbackTypes","keys","feedbackStats","notification","feedbackType","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oZAEA,IAQeA,EARHC,IAAOC,IAAV,KCOMC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,cAAC,EAAD,UAAMA,KCWxBC,EAZM,SAAC,GAAD,QAAGC,aAAH,MAAW,QAAX,EAAoBF,EAApB,EAAoBA,SAApB,OACnB,oCACE,6BAAKE,IACJF,M,mRCHL,IAaeG,EAbMN,IAAOO,OAAV,KCaHC,EAZA,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,MAAOI,EAAiB,EAAjBA,WACvB,OACE,cAAC,EAAD,CAAcC,KAAK,SAASC,QAAS,kBAAMF,EAAWJ,EAAMO,gBAA5D,SACGP,KCeQQ,EAlBS,SAAC,GAGlB,IAAD,IAFJC,eAEI,MAFM,CAAC,OAAQ,UAAW,OAE1B,EADJL,EACI,EADJA,WAEA,OACE,mCACGK,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBZ,MAAOW,EAAQP,WAAYA,GAA9BQ,SCgBNC,EAxBI,SAAC,GAAD,QACjBC,YADiB,MACV,EADU,MAEjBC,eAFiB,MAEP,EAFO,MAGjBC,WAHiB,MAGX,EAHW,MAIjBC,aAJiB,MAIT,EAJS,MAKjBC,mBALiB,MAKH,EALG,SAOjB,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCNWC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCC3BC,EAHY,SAACC,GAAD,OACzBC,OAAOC,OAAOF,GAAKG,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,ICOxCC,EANyB,SAACN,EAAKO,GAC5C,IAAMZ,EAAQI,EAAmBC,GAC3BQ,IAAYR,EAAIO,GAAOZ,EAAS,KAAKc,QAAQ,GACnD,OAAOd,EAAQa,EAAS,GCsCXE,EAlCH,WAAO,IAAD,EACgBC,mBAAS,CAAEnB,KAAM,EAAGC,QAAS,EAAGC,IAAK,IADrD,mBACTkB,EADS,KACCC,EADD,KAEVC,EAAgBb,OAAOc,KAAKH,GAAUxB,KAAI,SAACmB,GAAD,OAASA,KASnDS,EACJ,cAAC,EAAD,CACExB,KAAMoB,EAASpB,KACfC,QAASmB,EAASnB,QAClBC,IAAKkB,EAASlB,IACdC,MAAOI,EAAmBa,GAC1BhB,YAAaU,EAAgCM,EAAU,UAGrDK,EAAe,cAAC,EAAD,CAAcnB,QAAQ,yBAE3C,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAcpB,MAAM,2BAApB,SACE,cAAC,EAAD,CAAiBS,QAAS2B,EAAehC,WArBvB,SAACoC,GACvBL,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,kBAETD,EAAeC,EAAUD,GAAgB,YAoB1C,cAAC,EAAD,CAAcxC,MAAM,aAApB,SACGqB,EAAmBa,GAAY,EAAII,EAAgBC,Q,MC/B5DG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d4f144ac.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Div = styled.div`\n  max-width: 1170px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 12px;\n  padding-right: 12px;\n`;\n\nexport default Div;\n","import PropTypes from 'prop-types';\nimport Div from './LayoutStyles';\n\nconst Layout = ({ children }) => <Div>{children}</Div>;\n\nLayout.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n};\n\nexport default Layout;\n","import PropTypes from 'prop-types';\n\nconst SectionTitle = ({ title = 'Title', children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSectionTitle.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SectionTitle;\n","import styled from 'styled-components';\n\nconst ButtonStyled = styled.button`\n  padding: 6px;\n  border: 1px solid #a9a9a9;\n  border-radius: 5px;\n  background-color: #fff;\n  min-width: 50px;\n  text-transform: capitalize;\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nexport default ButtonStyled;\n","import PropTypes from 'prop-types';\r\nimport ButtonStyled from './ButtonStyles';\r\n\r\nconst Button = ({ title, onFeedback }) => {\r\n  return (\r\n    <ButtonStyled type=\"button\" onClick={() => onFeedback(title.toLowerCase())}>\r\n      {title}\r\n    </ButtonStyled>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  onFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default Button;\r\n","import PropTypes from 'prop-types';\r\nimport Button from './Button/Button';\r\n\r\nconst FeedbackOptions = ({\r\n  options = ['good', 'neutral', 'bad'],\r\n  onFeedback,\r\n}) => {\r\n  return (\r\n    <>\r\n      {options.map((option, i) => (\r\n        <Button key={i} title={option} onFeedback={onFeedback} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({\n  good = 0,\n  neutral = 0,\n  bad = 0,\n  total = 0,\n  posFeedback = 0,\n}) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {posFeedback}%</p>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  posFeedback: PropTypes.number,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","const countTotalFeedback = (obj) =>\r\n  Object.values(obj).reduce((acc, curr) => acc + curr, 0);\r\n\r\nexport default countTotalFeedback;\r\n","import countTotalFeedback from './countTotalFeedback';\r\n\r\nconst countPositiveFeedbackPercentage = (obj, key) => {\r\n  const total = countTotalFeedback(obj);\r\n  const result = +((obj[key] / total) * 100).toFixed(1);\r\n  return total ? result : 0;\r\n};\r\n\r\nexport default countPositiveFeedbackPercentage;\r\n","import { useState } from 'react';\r\nimport Layout from './components/Layout/Layout';\r\nimport SectionTitle from './components/SectionTitle';\r\nimport FeedbackOptions from './components/FeedbackOptions';\r\nimport Statistics from './components/Statistics';\r\nimport Notification from './components/Notification';\r\nimport countTotalFeedback from './js/countTotalFeedback';\r\nimport countPositiveFeedbackPercentage from './js/countPositiveFeedbackPercentage';\r\n\r\nconst App = () => {\r\n  const [feedback, setFeedback] = useState({ good: 0, neutral: 0, bad: 0 });\r\n  const feedbackTypes = Object.keys(feedback).map((key) => key);\r\n\r\n  const increaseCounter = (feedbackType) => {\r\n    setFeedback((prevState) => ({\r\n      ...prevState,\r\n      [feedbackType]: prevState[feedbackType] + 1,\r\n    }));\r\n  };\r\n\r\n  const feedbackStats = (\r\n    <Statistics\r\n      good={feedback.good}\r\n      neutral={feedback.neutral}\r\n      bad={feedback.bad}\r\n      total={countTotalFeedback(feedback)}\r\n      posFeedback={countPositiveFeedbackPercentage(feedback, 'good')}\r\n    />\r\n  );\r\n  const notification = <Notification message=\"No feedback given :(\" />;\r\n\r\n  return (\r\n    <Layout>\r\n      <SectionTitle title=\"What do you think of us?\">\r\n        <FeedbackOptions options={feedbackTypes} onFeedback={increaseCounter} />\r\n      </SectionTitle>\r\n      <SectionTitle title=\"Statistics\">\r\n        {countTotalFeedback(feedback) > 0 ? feedbackStats : notification}\r\n      </SectionTitle>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n// import AppHooks from './AppHooks';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}